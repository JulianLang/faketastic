import { quantity } from '../../src/attached-fns';
import { build } from '../../src/builder';
import { oneOf, use } from '../../src/property-fns';

describe('oneOf: e2e', () => {
  it('should clone the given input array to avoid errors with quantity', () => {
    // arrange
    const child = { b: 4711 };
    const item = { a: oneOf([child]) };
    /*
      the oneOf method should clone the items before choosing
      one in order to avoid side-effects on buildables within
      the targeted array for other oneOfs generated by quantity(n).

      This ensure that the other oneOfs do not choose already
      fix/built items, that would be dynamic/buildable otherwise.
    */
    const mdl = use(item, quantity(2));

    // act
    const items = build(mdl);

    // assert
    expect(items[0].a).toEqual(child);
    expect(items[0].a).not.toBe(child);
    expect(items[1].a).toEqual(child);
    expect(items[1].a).not.toBe(child);
  });
});
